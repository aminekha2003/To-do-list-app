import tkinter
from tkinter import *
import os

os.chdir(r"C:\Users\akhal\.venv\mon-env\TO DO LIST APP")


root = Tk()  # Crée une fenêtre principale, assignée à la variable "root"
root.title("To-do-list")  # Définit le titre de la fenêtre
root.geometry("400x650+400+100")  # Définit la taille et la position de la fenêtre
root.resizable(False, False)  #  Empêche la redimension de la fenêtre en largeur (premier False) et en hauteur (deuxième False)

task_list = []  # Liste pour stocker les tâches 

def addTask():
    task = task_entry.get()  # Récupère le texte saisi dans la zone de saisie task_entry
    task_entry.delete(0, END)  # Efface le contenu de la zone de saisie task_entry

    if task:  # Vérifie si la variable task contient du texte (c'est-à-dire que la tâche n'est pas vide)
        with open("tasklist.txt", "a") as taskfile:  # Ouvre le fichier "tasklist.txt" en mode ajout (append) et l'assigne à la variable taskfile
            taskfile.write(f"\n{task}")  # Écrit la tâche dans le fichier, en ajoutant une nouvelle ligne au début
            task_list.append(task)  # Ajoute la tâche à la liste task_list
            listbox.insert(END, task)  # Insère la tâche à la fin de la boîte de liste listbox

# Cette fonction est appelée lorsque le bouton "ADD" est cliqué. Elle récupère le texte saisi, l'ajoute à la liste task_list et l'insère dans la boîte de liste listbox.
# Assurez-vous d'avoir une zone de saisie task_entry et une boîte de liste listbox dans votre interface utilisateur, et d'associer correctement la fonction addTask au bouton "ADD".
# Vous pouvez ajuster le comportement de cette fonction en fonction de vos besoins spécifiques.



def openTaskFile():
    try:
        global task_list  # Utilise la variable task_list globale pour stocker les tâches
        with open("tasklist.txt", "r") as taskfile:  # Ouvre le fichier "tasklist.txt" en mode lecture et l'assigne à la variable taskfile
            tasks = taskfile.readlines()  # Lit toutes les lignes du fichier et les stocke dans la liste tasks

        for task in tasks:  # Parcourt chaque élément (ligne) de la liste tasks
            if task != '\n':  # Vérifie si la ligne n'est pas vide
                task_list.append(task)  # Ajoute la tâche à la liste task_list
                listbox.insert(END, task)  # Insère la tâche à la fin de la boîte de liste listbox
    except:  # Si une exception (erreur) se produit lors de l'ouverture du fichier
        file = open('tasklist', 'w')  # Crée un nouveau fichier "tasklist" en mode écriture (s'il n'existe pas)
        file.close()  # Ferme le fichier (pour s'assurer qu'il est bien enregistré)

    
def deleteTask():
    global task_list  # Utilise la variable task_list globale pour accéder aux tâches
    task = str(listbox.get(ANCHOR))  # Récupère la tâche sélectionnée dans la boîte de liste
    if task in task_list:  # Vérifie si la tâche est présente dans la liste task_list
        task_list.remove(task)  # Supprime la tâche de la liste task_list
        with open('tasklist', 'w') as taskfile:  # Ouvre le fichier "tasklist" en mode écriture et l'assigne à la variable taskfile
            for task in task_list:  # Parcourt chaque tâche dans la liste task_list
                taskfile.write(task + "\n")  # Écrit la tâche dans le fichier, suivie d'un saut de ligne
        listbox.delete(ANCHOR)  # Supprime la tâche sélectionnée de la boîte de liste,  ANCHOR comme argument pour la méthode listbox.get(). Cela permet de récupérer la valeur de l'élément actuellement sélectionné dans la boîte de liste (Listbox) et de l'assigner à la variable task.


#Icone
Image_icon = PhotoImage(file="task.png")  # Charge l'icône depuis le fichier "task.png" dans le fichier TO DO LIST
root.iconphoto(False, Image_icon)  # Le premier paramètre False indique que cette image sera utilisée comme icône pour la fenêtre principale

# Barre Haute
TopImage=PhotoImage(file='topbar.png')
Label(root,image=TopImage).pack() # Crée un widget Label contenant l'image TopImage et l'affiche dans la fenêtre principales

dockImage=PhotoImage(file='dock.png')
Label(root,image=dockImage,bg="#32405b").place(x=30, y=25) # 'bg="#32405b"' sert à mettre une couleur en arrière plan de l'image et .place(x=.., y=..) sert à placer l'image par rapoort à x et y

heading=Label(root,text="ALL TEXT", font="arial 20 bold", fg="white", bg="#32405b")
heading.place(x=130, y=20)

#main 
frame=Frame(root, width=400, height=50, bg="white")  # Crée un cadre (Frame) avec une largeur de 400 pixels, une hauteur de 50 pixels et un fond blanc
frame.place(x=0, y=180)  # Place le cadre dans la fenêtre principale aux coordonnées x=0, y=180

task = StringVar()  # Crée une variable de type StringVar() pour stocker la valeur de la tâche
task_entry = Entry(frame, width=18, font="arial 20", bd=0)  # Crée un widget Entry (zone de saisie) dans le cadre avec une largeur de 18, une police de caractères arial de taille 20 et un style de bordure de largeur 0
task_entry.place(x=10, y=7)  # Place le widget Entry dans le cadre aux coordonnées x=10, y=7
task_entry.focus() # Définit le focus sur le champ de saisie 'task_entry

button=Button(frame,text="ADD",font="arial 20 bold",width=6, bg="#5a95ff", fg="#fff", bd=0, command=addTask) # Crée un bouton avec du texte et des styles spécifique
button.place(x=300, y=0)

#listbox
frame1 = Frame(root, bd=3, width=700, height=280, bg="#32405b")  # Crée un cadre (frame) appelé "frame1" avec une bordure de largeur 3, une largeur de 700 pixels, une hauteur de 280 pixels et une couleur de fond bleu foncé
frame1.pack(pady=(160,0))  # Place le cadre "frame1" dans la fenêtre principale avec un padding vertical de 160 pixels en haut

listbox = Listbox(frame1, font=('arial', 12), width=40, height=16, bg='#32405b', fg="white", cursor='hand2', selectbackground='#5a95ff')  # Crée une boîte de liste (Listbox) appelée "listbox" à l'intérieur de "frame1" avec une police de caractères, une taille, des couleurs et des options spécifiées
listbox.pack(side=LEFT, fill=BOTH, padx=2)  # Place la Listbox à gauche du cadre "frame1", en remplissant l'espace disponible horizontalement et verticalement, avec un padding horizontal de 2 pixels
scrollbar = Scrollbar(frame1)  # Crée une barre de défilement (Scrollbar) associée à "frame1"
scrollbar.pack(side=RIGHT, fill=BOTH)  # Place la barre de défilement à droite du cadre "frame1", en remplissant l'espace disponible horizontalement et verticalement

listbox.config(yscrollcommand=scrollbar.set)  # Configure la Listbox pour utiliser la barre de défilement en vertical (axe y)
scrollbar.config(command=listbox.yview)  # Configure la barre de défilement pour contrôler le défilement vertical de la Listbox

 
openTaskFile()
#Delete
Delete_icon = PhotoImage(file="delete.png")  # Charge l'image "delete.png" et crée un objet PhotoImage appelé Delete_icon

# Crée un bouton avec l'image Delete_icon, sans bordure, et associe la fonction deleteTask comme commande
Button(root, image=Delete_icon, bd=0, command=deleteTask).pack(side=BOTTOM, pady=13)
# Affiche le bouton en bas de la fenêtre principale avec un espacement vertical de 13 pixels

root.mainloop()  # Lance la boucle principale de l'application
